		// <div className={`${googleFont.className} main`}>
			{/* <h1 className="header">Full-stack Developer</h1> */}
			{/* <h2 className="header">David Gaitsgory</h2> */}
			{/* <div className="countdown">
				<p className="cdg">
					<span className="label">days</span>
					<span className="value">{days}</span>
				</p>
				<p className="cdg">
					<span className="label">hours</span>
					<span className="value">{hours}</span>
				</p>
				<p className="cdg">
					<span className="label">minutes</span>
					<span className="value">{minutes}</span>
				</p>
				<p className="cdg">
					<span className="label">seconds</span>
					<span>
						<motion.span key={'second0' + secondsStr[0]}
							animate={{ opacity: 1 }}
							initial={{
								opacity: 0,
							}}
							transition={{
								type: "spring",
								stiffness: 100,
								duration: 200
							}}
							className="value">{secondsStr[0]}
						</motion.span>
						<motion.span key={'seconds1' + secondsStr[1]}
							animate={{ opacity: 1 }}
							initial={{
								opacity: 0,
							}}
							transition={{
								ease: "linear",
								duration: 0.2,
								// type:,
								// stiffness: 100,
								// duration: 1000
							}}
							className="value">{secondsStr[1]}
						</motion.span>
					</span>
				</p>
			</div> */}
			// <div id="email">copy email</div>
			// </div>


			const [days, setDays] = useState(times.days)

	const [hours, setHours] = useState(times.hours)
	const [minutes, setMinutes] = useState(times.minutes)
	const [seconds, setSeconds] = useState(times.seconds)

	useEffect(() => {
		const intervalId = setInterval(() => {

			const { days, hours, minutes, seconds } = getTimes()

			setDays(days)
			setHours(hours)
			setMinutes(minutes)
			setSeconds(seconds)

		}, 1000)

		return () => clearInterval(intervalId)

	}, [days, hours, minutes, seconds])

	const secondsStr = String(seconds).split('')

	if (secondsStr.length === 1) {
		secondsStr.unshift('0')
	}



	/*
	useLayoutEffect(() => {
		// @ts-ignore
		var c = document.getElementById('canv');
		// @ts-ignore
		var $ = c.getContext('2d');

		// @ts-ignore
		var col = function (x, y, r, g, b) {
			$.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
			$.fillRect(x, y, 1, 1);
		}

		// @ts-ignore
		var R = function (x, y, t) {
			return (Math.floor(192 + 64 * Math.cos((x * x - y * y) / 300 + t)));
		}

		// @ts-ignore
		var G = function (x, y, t) {
			return (Math.floor(192 + 64 * Math.sin((x * x * Math.cos(t / 4) + y * y * Math.sin(t / 3)) / 300)));
		}

		// @ts-ignore
		var B = function (x, y, t) {
			return (Math.floor(192 + 64 * Math.sin(5 * Math.sin(t / 9) + ((x - 100) * (x - 100) + (y - 100) * (y - 100)) / 1100)));
		}

		var t = 0;

		var run = function () {
			// @ts-ignore
			for (let x = 0; x <= 32; x++) {
				// @ts-ignore
				for (let y = 0; y <= 32; y++) {
					// @ts-ignore
					col(x, y, R(x, y, t), G(x, y, t), B(x, y, t));
				}
			}
			t = t + 0.020;
			window.requestAnimationFrame(run);
		}

		// run();
	})
	*/



// function getTimes() {
// 	const now = new Date().getTime()

// 	// Find the distance between now and the count down date
// 	const distance = countDownDate - now

// 	// Time calculations for days, hours, minutes and seconds
// 	return {
// 		days: Math.floor(distance / (1000 * 60 * 60 * 24)),
// 		hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
// 		minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),
// 		seconds: Math.floor((distance % (1000 * 60)) / 1000),
// 	}
// }